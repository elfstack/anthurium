<?php

namespace Tests\Unit;

use App\Exceptions\AlreadyProcessedException;
use App\Exceptions\InactiveActivityException;
use App\Exceptions\NotAdmittedException;
use App\Exceptions\NotCheckedInException;
use App\Models\Activity;
use App\Models\Participation;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ParticipationTest extends TestCase
{
    use InteractsWithDatabase;
    use RefreshDatabase;

    /**
     * @var Participation
     */
    private Participation $participation;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $activity = factory(Activity::class)->create([
            'starts_at' => Carbon::now()->addHour(),
            'ends_at' => Carbon::now()->addHours(2),
            'is_published' => true
        ]);

        $participant = factory(User::class)->create();

        $activity->addParticipant($participant);
        $this->participation = $activity->participations($participant);
    }

    public function test_pivot_parent_is_instance_of_activity(): void
    {
        $this->assertInstanceOf(Activity::class, $this->participation->pivotParent);
    }

    public function test_approve_participant(): void
    {
        $this->participation->admit();
        $this->assertNotNull($this->participation->approved_at);
    }

    public function test_reject_participant(): void
    {
        $this->participation->reject();
        $this->assertNotNull($this->participation->rejected_at);
    }

    public function test_duplicate_approval(): void
    {
        $this->expectException(AlreadyProcessedException::class);
        $this->participation->admit();
        $this->participation->admit();
    }

    public function test_check_in(): void
    {
        $this->setActivityToOngoing();
        $this->participation->admit();
        $this->participation->checkIn();
        $this->assertNotNull($this->participation->arrived_at);
    }

    public function test_check_in_on_participant_not_admitted(): void
    {
        $this->setActivityToOngoing();
        $this->expectException(NotAdmittedException::class);
        $this->participation->checkIn();
    }

    public function test_check_in_on_activity_not_started(): void
    {
        $this->expectException(InactiveActivityException::class);
        $this->participation->admit();
        $this->participation->checkIn();
    }

    public function test_check_out(): void
    {
        $this->setActivityToOngoing();
        $this->participation->admit();
        $this->participation->checkIn();
        $this->participation->checkOut();

        $this->assertNotNull($this->participation->left_at);
    }

    public function test_check_out_before_check_in(): void
    {
        $this->setActivityToOngoing();
        $this->expectException(NotCheckedInException::class);
        $this->participation->admit();
        $this->participation->checkOut();
    }

    public function test_get_otp(): void
    {
        $otp = unserialize($this->participation->otp());
        $this->assertArrayHasKey('id', $otp);
        $this->assertArrayHasKey('expires', $otp);
        $this->assertArrayHasKey('signature', $otp);
    }

    private function setActivityToOngoing()
    {
        $this->participation->pivotParent->starts_at = Carbon::now()->subHour();
    }
}
