<?php

namespace Tests\Unit;

use App\Exceptions\AlreadyEnrolledException;
use App\Exceptions\AlreadyProcessedException;
use App\Exceptions\InactiveActivityException;
use App\Exceptions\NotAdmittedException;
use App\Exceptions\NotCheckedInException;
use App\Exceptions\NotPermittedException;
use App\Exceptions\NoVacancyException;
use App\Models\Activity;
use App\Models\Participation;
use App\Models\User;
use App\Models\UserGroup;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class EnrollActivityTest extends TestCase
{
    use InteractsWithDatabase;
    // use RefreshDatabase;

    private User $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        /// $this->seed(\UserGroupSeeder::class);

        $this->user = $this->getUser();
    }

    private function getUser(): User
    {
        $user = factory(User::class)->create();
        $user->setUserGroup(UserGroup::find(1));

        return $user;
    }

    private function getActivity(): Activity
    {
        return factory(Activity::class)->create([
            'starts_at' => Carbon::now()->addHour(),
            'ends_at' => Carbon::now()->addHours(2),
            'is_published' => true,
        ]);
    }


    /**
     * @return Activity
     */
    public function test_activity_is_active(): Activity
    {
        $activity = $this->getActivity();
        $this->assertEquals('upcoming', $activity->getStatus());

        return $activity;
    }

    /**
     * @depends test_activity_is_active
     * @param Activity $activity
     * @return Activity
     */
    public function test_user_is_in_user_group(Activity $activity): Activity
    {
        $activity->setUserGroup([$this->user->userGroup->id]);

        $inGroup = $activity->userGroups()->pluck('id')->contains($this->user->userGroup->id);
        $this->assertTrue($inGroup);

        return $activity;
    }

    /**
     * @depends test_user_is_in_user_group
     * @param Activity $activity
     * @return Activity
     */
    public function test_user_is_not_enrolled_before(Activity $activity): Activity
    {
        $hasRecord = $activity->participations()->where('user_id', $this->user->id)->exists();
        $this->assertFalse($hasRecord);

        return $activity;
    }

    /**
     * @depends test_user_is_not_enrolled_before
     * @param Activity $activity
     * @return array
     */
    public function test_user_enroll_activity(Activity $activity): array
    {
        $activity->setUserGroup([1]);
        $activity->addParticipant($this->user);

        $recordCount = $activity->participations()->where('user_id', $this->user->id)->count();
        $this->assertEquals(1, $recordCount);

        return [$activity, $this->user];
    }

    /**
     * @depends test_user_enroll_activity
     * @param array $obj
     */
    public function test_activity_has_vacancy(array $obj)
    {
        $activity = $obj[0];
        $this->assertLessThanOrEqual($activity->quota, $activity->getAdmittedApplicantCount());
        return $obj;
    }

    /**
     * Approve participant
     *
     * @depends test_activity_has_vacancy
     * @param array $obj
     */
    public function test_approve_participant(array $obj): void
    {
        $activity = $obj[0];
        $user = $obj[1];
        $participation = $activity->participations($user);
        $participation->admit();

        $this->assertNotNull($participation->approved_at);
        $this->assertNull($participation->rejected_at);
    }


    /**
     * Approve participant
     * @depends test_user_enroll_activity
     * @param array $obj
     */
    public function test_reject_participant(array $obj): void
    {
        $activity = $obj[0];
        $user = $obj[1];

        $participation = $activity->participations($user);
        $participation->reject();

        $this->assertNotNull($participation->rejected_at);
        $this->assertNull($participation->approved_at);
    }

    /**
     * User can only enroll upcoming activities
     */
    public function test_cannot_enroll_if_activity_is_not_active(): void
    {
        $this->expectException(InactiveActivityException::class);

        $draftActivity = $this->getActivity();
        $draftActivity->is_published = false;
        $draftActivity->save();

        $draftActivity->addParticipant($this->user);
    }

    public function test_cannot_enroll_if_not_in_user_group(): void
    {
        $this->expectException(NotPermittedException::class);

        $noUserGroupActivity = $this->getActivity();
        $noUserGroupActivity->setUserGroup([]);

        $noUserGroupActivity->addParticipant($this->user);
    }

    /**
     * @depends test_user_enroll_activity
     * @param array $obj
     */
    public function test_cannot_enroll_a_user_twice(array $obj): void
    {
        $activity = $obj[0];
        $user = $obj[1];

        $this->expectException(AlreadyEnrolledException::class);
        $activity->addParticipant($user);
    }
    /**
     * @depends test_user_enroll_activity
     * @param array $obj
     */
    public function test_cannot_approve_participant_when_no_vacancy(array $obj): void
    {
        $this->expectException(NoVacancyException::class);

        $activity = $obj[0];
        $activity->quota = 1;
        $activity->save();
        $user = $obj[1];
        $newUser = $this->getUser();

        $activity->participations($user)->admit();
        $activity->addParticipant($newUser);
        $activity->participations($newUser)->admit();
    }
}
